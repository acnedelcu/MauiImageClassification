using Android.Runtime;
using CommunityToolkit.Mvvm.ComponentModel;
using CommunityToolkit.Mvvm.Input;
using MauiImageClassification.Services;

namespace MauiImageClassification.ViewModels
{
    public partial class MainPageViewModel : BaseViewModel
    {
        private readonly IImageClassifier imageClassifier;

        /// <summary>
        /// Constructor
        /// </summary>
        public MainPageViewModel(IImageClassifier imageClassifier)
        {
            this.imageClassifier = imageClassifier;
        }

        [ObservableProperty]
        private string classificationResult; // ClassificationResult is generated by the toolkit

        #region Commands

        [RelayCommand]
        private async Task ClassifyCapturedImage()
        {
            if (IsBusy)
            {
                return;
            }

            try
            {
                IsBusy = true;

                MemoryStream imageStream = await CaptureImageAsync();
                if (imageStream is null || imageStream.Length == 0)
                {
                    throw new ArgumentNullException(nameof(imageStream));
                }

                string classificationResult = await imageClassifier.ClassifyImageAsync(imageStream.ToArray());
                if (string.IsNullOrWhiteSpace(classificationResult))
                {
                    throw new ArgumentNullException(nameof(classificationResult));
                }
                ClassificationResult = classificationResult; // always operate on the public property not the backing field
            }
            catch (Exception ex)
            {
            }
            finally
            {
                IsBusy = false;
            }
        }

        [RelayCommand]
        private async Task ClassifiyGalleryImage()
        {
            if (IsBusy)
            {
                return;
            }

            try
            {
                IsBusy = true;

                MemoryStream imageStream = await PickGalleryImageAsync();
                if (imageStream is null || imageStream.Length == 0)
                {
                    throw new ArgumentNullException(nameof(imageStream));
                }

                string classificationResult = await imageClassifier.ClassifyImageAsync(imageStream.ToArray());
                if (string.IsNullOrWhiteSpace(classificationResult))
                {
                    throw new ArgumentNullException(nameof(classificationResult));
                }
                ClassificationResult = classificationResult;
            }
            catch (Exception ex)
            {
            }
            finally
            {
                IsBusy = false;
            }
        }

        #endregion

        #region PrivateMethods

        /// <summary>
        /// Handles the logic for capturing an image using the device's camera
        /// </summary>
        /// <returns>The <see cref="MemoryStream"/> of the captured image</returns>
        private async Task<MemoryStream> CaptureImageAsync()
        {
            if (!MediaPicker.IsCaptureSupported)
            {
                throw new Exception("Capture not supported!"); // handle accordingly
            }

            FileResult? photo = await MediaPicker.CapturePhotoAsync();
            _ = photo ?? throw new ArgumentNullException(nameof(photo));

            Stream imageStream = await photo.OpenReadAsync();
            if (imageStream.Length == 0)
            {
                throw new Exception("Invalid photo!");
            }

            MemoryStream memoryStream = new();
            await imageStream.CopyToAsync(memoryStream);
            return memoryStream;
        }

        /// <summary>
        /// Handles the logic for picking an image from the gallery and returning its stream
        /// </summary>
        /// <returns>The <see cref="MemoryStream"/> of the selected image</returns>
        private async Task<MemoryStream> PickGalleryImageAsync()
        {
            if (!MediaPicker.IsCaptureSupported)
            {
                throw new Exception("Capture not supported!"); // handle accordingly
            }

            FileResult? photo = await MediaPicker.PickPhotoAsync(new MediaPickerOptions()
            {
                Title = "Please select a photo"
            });
            _ = photo ?? throw new ArgumentNullException(nameof(photo));

            Stream imageStream = await photo.OpenReadAsync();
            if (imageStream.Length == 0)
            {
                throw new ArgumentNullException(nameof(imageStream));
            }

            MemoryStream memoryStream = new();
            await imageStream.CopyToAsync(memoryStream);
            return memoryStream;
        }

        #endregion
    }
}
